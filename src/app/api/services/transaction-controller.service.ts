/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create } from '../fn/transaction-controller/create';
import { Create$Params } from '../fn/transaction-controller/create';
import { deleteById } from '../fn/transaction-controller/delete-by-id';
import { DeleteById$Params } from '../fn/transaction-controller/delete-by-id';
import { getAllTransactions } from '../fn/transaction-controller/get-all-transactions';
import { GetAllTransactions$Params } from '../fn/transaction-controller/get-all-transactions';
import { getById } from '../fn/transaction-controller/get-by-id';
import { GetById$Params } from '../fn/transaction-controller/get-by-id';
import { Transaction } from '../models/transaction';
import { update } from '../fn/transaction-controller/update';
import { Update$Params } from '../fn/transaction-controller/update';

@Injectable({ providedIn: 'root' })
export class TransactionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `update()` */
  static readonly UpdatePath = '/transaction/{id}/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<Transaction>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<Transaction> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<Transaction>): Transaction => r.body)
    );
  }

  /** Path part for operation `getAllTransactions()` */
  static readonly GetAllTransactionsPath = '/transaction';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTransactions$Response(params?: GetAllTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Transaction>>> {
    return getAllTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTransactions(params?: GetAllTransactions$Params, context?: HttpContext): Observable<Array<Transaction>> {
    return this.getAllTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Transaction>>): Array<Transaction> => r.body)
    );
  }

  /** Path part for operation `create()` */
  static readonly CreatePath = '/transaction';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create$Response(params: Create$Params, context?: HttpContext): Observable<StrictHttpResponse<Transaction>> {
    return create(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create(params: Create$Params, context?: HttpContext): Observable<Transaction> {
    return this.create$Response(params, context).pipe(
      map((r: StrictHttpResponse<Transaction>): Transaction => r.body)
    );
  }

  /** Path part for operation `getById()` */
  static readonly GetByIdPath = '/transaction/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById$Response(params: GetById$Params, context?: HttpContext): Observable<StrictHttpResponse<Transaction>> {
    return getById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById(params: GetById$Params, context?: HttpContext): Observable<Transaction> {
    return this.getById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Transaction>): Transaction => r.body)
    );
  }

  /** Path part for operation `deleteById()` */
  static readonly DeleteByIdPath = '/transaction/{id}/delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById$Response(params: DeleteById$Params, context?: HttpContext): Observable<StrictHttpResponse<Transaction>> {
    return deleteById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById(params: DeleteById$Params, context?: HttpContext): Observable<Transaction> {
    return this.deleteById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Transaction>): Transaction => r.body)
    );
  }

}
